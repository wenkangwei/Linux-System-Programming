/* lab4.c
 * Wenkang Wei
 * wenkanw
 * ECE 2220, Fall 2017
 * MP4
 * Subject: ECE222-1,#4
 *
 * Purpose: A simple packet sniffer that can handle packets with non-printable
 *          characters. The sniffer can find any byte, string, or web address
 *          in any packet.
 *
 * Assumptions:
 *     Input file is read in as bytes.  The input file must have the correct
 *     format.  Minimal error checking is included to validate the input data.
 *
 *
 * Command line argument
 *     Name of file to read.  The file must contain one packet per line with
 *     the format
 *        size packet_contents
 *     The size is the number of bytes in the packet, and the packet_contents
 *     is the binary data, read as bytes.  The size of the packet must be
 *     correct, and there must be exactly one space character between the size
 *     field and the start of the packet_contents.  Note the bytes in a packet
 *     can have any value, so the packet may not be printable.
 *
 * Bugs:
 *  unknown
 * Notes:
 *     The number of packets that can be stored is limited to MAXPACKETS - 1
 *     because one position is needed to mark where the last packet ends.
 *
 * See the ECE 2220 programming guide
 *
 * Format with
 *     astyle --style=kr lab4.c
 *
 * Replace "kr" with: bsd, ansi, java, gnu, linux, vtk, or google.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAXLINE 128

#define MAXPACKETLENGTH 128
#define MAXPACKETS      8192
#define MAXFILESIZE     1048576
#define uchar           unsigned char
/*
* @brief is_alphaChar:
*	 this function is to check whether the character is alphabetic char
*	if so, return 1, else, return 0
*@para c:
*	letter need checking
*@return:
*	0: it isn't alphabetic char. 1: it is alphabetic char
*/
int is_alphaChar(char c)
{
    uchar c1=c&0xFF;
    // check wheter character is alphabetic char
    return ( (c1>='A' && c1<= 'Z') || (c1>='a' &&c1<='z') )? 1:0;
}


/*----------------------------------------------------------*/
/* A stub function for printing packets as 16-byte aligned lines of text.
 *
 * input:
 *     position: the location of the point of interest. For example, the found
 *               byte or the first character in a found string. If position is
 *               -1, then there is no point of interest.
 *     slen:  the length of the found string (or 1 for a found byte)
 *     packets: an array of pointers to each packet's starting address in memory
 *     packetnum: the index of the packet of interest
 *
 * output:
 *     prints a packet as formatted 16-byte lines of text.
 *     This function continues to print 16-byte lines so that the entire packet
 *     is displayed.  A non-printable character is replaced with a space (' ').
 *     In addition, the point of interest (e.g. the found byte or found string)
 *     is marked, as discussed in the pdf.
 */
void print_packet(int position, int slen, char *packets[MAXPACKETS], int packetnum)
{
    int piece_index=0, i=0;
    int packetlen;
    int piece_amt;
    int pos_index=0;
    char *packet_ptr= packets[packetnum];
    // get packet length
    packetlen= (packets[packetnum+1] -packets[packetnum])/sizeof(char);     //get packet length
    piece_amt=  packetlen%16==0? packetlen : packetlen+ (16- packetlen%16 );//get the total amount of pieces in a packet
    piece_amt= piece_amt/16;
    //  loop and print each piece
    for ( piece_index = 0; piece_index < piece_amt ; ++ piece_index) {
        /*-----------------print first line------------*/
        printf("          ");
        for ( i= 0; i < 16; ++i) {
            printf("%d ", i%10);
            // print gap between two printable chars
            if(i<15)
                printf(" ");
        }
        printf("\n");
        /*----------------print second line-------------*/
        printf("[%4d-%d] ", packetnum, piece_index );
        // check if it is in the packet
        for (pos_index= piece_index*16 ; pos_index <(piece_index+1)*16 ; ++pos_index) {
            // print gap
            if(pos_index < (piece_index+1)*16)
                printf(" ");
            if( pos_index < packetlen) {
                // check if it is printable
                if ( packet_ptr[pos_index]  >= 33 && packet_ptr[pos_index]<=127 )
                    printf("%c ",packet_ptr[pos_index]);
                else
                    printf("  ");
            } else
                printf("  ");
        }
        printf("\n");
        /*---------------print third line--------------*/
        printf("         ");
        for ( pos_index = piece_index*16; pos_index <(piece_index+1)*16 ; ++pos_index ) {
            // print gap
            if(pos_index < (piece_index+1)*16)
                printf(" ");
            if( pos_index< packetlen) {
                // check if it is printable
                if ( packet_ptr[pos_index] >= 33 && packet_ptr[pos_index]<=127 ) {
                    printf("%02X", packet_ptr[pos_index]);
                } else
                    printf("%02X", (char) packet_ptr[pos_index]&0xFF);   //if not printable, print blank
            } else
                printf("XX");
        }
        printf("\n");

        /*---------------print fourth line------------*/
        printf("         ");
        // scan packet string
        for ( pos_index =piece_index*16 ; pos_index <(piece_index+1)* 16; ++pos_index ) {
            //print gap
            if( pos_index> position &&  pos_index <=(position+slen-1))
                printf("-");
            else if( pos_index <packetlen)
                printf(" ");
            // print mark character
            if ( pos_index== position) {
                printf("^ ");
            } else if ( pos_index > position && pos_index < (position+slen-1)) {
                printf("--");
            } else if( pos_index ==(position+slen-1)) {
                printf("-|");
            } else if( pos_index < packetlen )
                printf("  ");
        }
        printf("\n\n");
    }

}

/*
* @brief c_to_hex:
*	this function is to convert the ASCII string
*	to hex value stored in unsigned char format
* @para *byte
*	the input is pointer pointing to a 8-bit value
*	needed to be converted to hex value
* @return:
*   hex value of the byte
*/

unsigned char c_to_hex(char * byte)
{
    unsigned char hex_result=0;
    int i=0;
    for(i=1; i>=0; i--) {
        // convert numeric char to hex
        if(byte[1-i] >='0' && byte[1-i]<='9')
            hex_result|= (byte[1-i]-48)<<(i*4);
        // convert upper letter to hex number
        if(byte[1-i] >='A' && byte[1-i] <='F')
            hex_result|= (byte[1-i]-55)<<(i*4);
        // convert lower letter to hex number
        if(byte[1-i] >='a' && byte[1-i] <='f')
            hex_result|= (byte[1-i]-87)<<(i*4);
    }
    return hex_result;

}

/*----------------------------------------------------------*/
/* This function is a stub for searching a particular packet for a byte.
 *
 * Use packets[packetnum] as the starting address for the particular packet.
 * Search within this packet for the first matching byte. Use the starting
 * address of the next packet (packets[packetnum+1]) to know when to end.
 *
 * input:
 *     packets: an array of pointers to each packet's starting address in memory
 *     packetnum: is the index of the packet of interest
 *     byte: is a string with the hex characters of the byte to find
 *
 * return value:
 *     1 if byte found within the packet
 *     0 if byte not found
 * side effects:
 *     If the byte is found, your function should call print_packet() and
 *     display the matched byte as discussed in the pdf
 */
int find_byte_packet(char * packets[MAXPACKETS], int packetnum, char * byte)
{
    int found = 0;
    int index=0;
    int position=0;
    int packetlen= (packets[packetnum+1]- packets[packetnum])/sizeof(char); //get packet string length
    char *packet_ptr= packets[packetnum];                                   //string pointer searching packet
    unsigned char hex_value= c_to_hex(byte);
    for (index = 0; index < packetlen; ++index) {
        // compare byte without sign bit
        if ( hex_value == (packet_ptr[index]&0xFF) ) {
            position= index;
            // print packet if it finds the byte
            print_packet(position, 1, packets, packetnum);
            found=1;
            break;
        }
    }

    return found;
}




/*----------------------------------------------------------*/
/* This function is a stub for searching a particular packet for a string.
 *
 * Use packets[packetnum] as the starting address for the particular packet.
 * Search within this packet for the first matching byte. Use the starting
 * address of the next packet (packets[packetnum+1]) to know when to end.
 *
 * input:
 *     packets: an array of pointers to each packet's starting address in memory
 *     packetnum: is the index of the packet of interest
 *     str: is the string to find
 *
 * return value:
 *     1 if string found within the packet
 *     0 if string not found
 * side effects:
 *     If the string is found, your function should call print_packet()
 *     and display the matched string as discussed in the pdf
 */
int find_string_packet(char *packets[MAXPACKETS], int packetnum, const char *str)
{
    char *str_pt=(char*) str;
    int i=0;
    int found = 0;
    char *packet_ptr=packets[packetnum] ;
    int pos_index=0;	//used to loop through each postion in the string
    int position=0;
    int packetlen= (packets[packetnum+1]- packets[packetnum])/sizeof(char);
    int slen= strlen(str);
    int cmp_cnt=0;
    for (pos_index = 0; pos_index < packetlen; ++pos_index) {
        // reset string pointer
        str_pt=(char*)str;
        // compare string
        for ( i = 0; i < slen ; ++i) {
            if(packet_ptr[pos_index+i] == *str_pt) {
                // if matched, compare next letter
                cmp_cnt++;
                str_pt++;
            } else {
                // reset count if char doesn't match
                cmp_cnt=0;
                break;
            }
        }
        //check if it found string
        //if found, break loop and return position
        if(cmp_cnt==slen) {
            position=pos_index;
            found=1;
            break;
        }
    }
    // print packet if it finds the byte
    if (found==1)
        print_packet(position, slen, packets, packetnum);

    return found;
}
/*----------------------------------------------------------*/
/* This function is a stub for searching all packets for a string.
 *
 * You may find that the implementation of this function is straightforward
 * provided that you have already implemented the find_string_packet() function.
 *
 * input:
 *     packets: an array of pointers to each packet's starting address in memory
 *     numpackets: the total number of packets
 *     str: the string to find
 *
 * return value:
 *     the number of packets found to contain the string. Note that a return
 *     value of 0 indicates the string was never found.
 *
 * side effects:
 *     This function should also formatted print each packet that contains the string.
 */
int find_string_all(char * packets[MAXPACKETS], int numpackets, const char * str)
{
    int found = 0;
    int packetnum=0;
    // scan each packet
    for(packetnum=0; packetnum < numpackets; packetnum++) {
        // count the number of the found packets
        found+=  find_string_packet(packets, packetnum, str);
    }

    return found;
}
/*----------------------------------------------------------*/
/* This function is a stub for searching all packets for a byte.
 *
 * You may find that the implementation of this function is straightforward
 * provided that you have already implemented the find_byte_packet() function.
 *
 * input:
 *     packets: an array of pointers to each packet's starting address in memory
 *     numpackets: the total number of packets
 *     byte: a string with the hex characters of the byte to find
 *
 * return value:
 *     the number of packets found to contain the byte. Note that a return
 *     value of 0 indicates the byte was never found.
 *
 * side effects:
 *     This function should also formatted print each packet that contains the byte.
 */
int find_byte_all(char * packets[MAXPACKETS], int numpackets, char *byte)
{
    int found = 0;
    int packetnum=0;
    for(packetnum=0; packetnum< numpackets; packetnum++) {
        // check and count number of found packets
        found += find_byte_packet(packets, packetnum, byte);
    }
    return found;

}


/*
*  @brief is_matched:
* 	   this function is to compare the  characters with amount of 'num'
*	   behind the address of *str_pt (including the letter at location str_pt)
*	   with the string *str.
* @para  *str_pt:
*	   source string need checking
* @para  *str:
* 	   pattern of string used to compare
* @para  num:
*	   the number of letters in *str
* @return:
*	1: the 'num' letters behind *str_pt are matched
*	0: they don't match
*/

int is_matched( char *str_pt, int num, char *str)
{
    int result=0;
    int index=0;
    for( index=0; index< num; index++) {
        if( str_pt[index] == str[index] ) result+=1;
        else {
            //if they don't match, exit and return 0
            result=0;
            break;
        }
    }

    return result!=0? 1:0;

}
/*----------------------------------------------------------*/
/* This function is a stub for searching all packets for website domain names.
 *
 * Although not strictly required, you may find that the implementation of this
 * function is straightforward if you first implement the find_website_packet()
 * function, similar to find_string_packet() and find_byte_packet().
 *
 * A string is a valid website only if it has the following form:
 *
 *      www.*.%%%
 *
 * That is, a website always
 *      1) begins with the literal string "www.",
 *      2) "*" means one or more alphabetic characters, and
 *      3) ends with ".%%%" where each % is exactly one alphabetic character.
 *
 * A string that violates this pattern for any reason is not a valid website.
 *
 * input:
 *     packets: an array of pointers to each packet's starting address in memory
 *     numpackets: the total number of packets
 *
 * return value:
 *     the number of packets found to contain a website.  Note that a return
 *     value of 0 indicates that no websites were found.
 *
 * side effects:
 *     This function should NOT print the packets that contain a website.
 *     Instead, this function prints the name of each website that is found,
 *     including duplicates.  (e.g. www.google.com)
 */
int find_websites(char *packets[MAXPACKETS], int numpackets)
{
    int found = 0;
    char web_head[]="www.";
    int packetnum=0;
    int packetlen=0;
    int pos_index;
    // int flag=0;
    char *packet_ptr, *site_ptr, *site_head_ptr, *site_end_ptr;
    //loop through each packet
    for( packetnum=0; packetnum<numpackets; packetnum++) {
        packet_ptr= packets[packetnum];
        //obtain length of string in the current packet
        packetlen= (packets[packetnum+1]- packets[packetnum])/sizeof(char);
        //loop through each char in packet
        // if found website at this position, position index move to
        // the end of this website
        for(pos_index =0; pos_index< packetlen; pos_index++) {
            // if it is at the beginning address of "www." string
            if(  is_matched(&packet_ptr[pos_index], 4, web_head) && (pos_index+3 <packetlen) ) {
                site_ptr= &packet_ptr[pos_index+4];
                site_head_ptr= &packet_ptr[pos_index];
                //check website name after the first '.' occurs
                if( is_alphaChar(*site_ptr) ) {
                    while( is_alphaChar(*site_ptr)  && site_ptr < packets[packetnum+1])
                        site_ptr++; //move pointer to non-alphabetic char

                    if( *site_ptr=='.' && (&site_ptr[3]) < packets[packetnum+1] ) {
                        //check whether the three alphabetic letters
                        //behind '.' are alphabetic character
                        if(is_alphaChar(site_ptr[1]) &&
                                is_alphaChar(site_ptr[2]) &&
                                is_alphaChar(site_ptr[3])
                          ) {
                            found+=1;
                            site_end_ptr= &site_ptr[3];
                            //skip the website and search
                            //if found webite, print websit name
                            if(site_end_ptr!=NULL) {

                                for( ; site_head_ptr <= site_end_ptr; site_head_ptr++)
                                    printf("%c", *site_head_ptr);
                                printf("\n");
                            }
                        }
                    }

                } else
                    pos_index++; //move position index to next char
            } else {
                // reset the head pointer and end pointer of website if
                //doesn't find website name from the current position
                site_end_ptr=NULL;
                site_head_ptr= site_end_ptr;
            }
        }
    }
    return found;
}

/*----------------------------------------------------------*/
/* Stores a packet within the dynamically-allocated memory space.
 *
 s done in main, and the file processing is done
 ).  The function process_input() will call this
 * function to store an individual packet within the space and to update the
 * packets[] accordingly.
 *
 * input:
 *     packetspace: the dynamically-allocated memory to space to store packets
 *     packets: an array of pointers to each packet's starting address in memory
 *     packet: a string that contains the characters of the packet. Although
 *             packet is appended with a '\0', you should not use string
 *             functions in this function because packet may also contain a '\0'.
 *     packetlength: the number of characters in the packet
 *     packetnum: this packet's number - its starting address should be saved
 *                in packets[packetnum].
 *
 * return value: none
 *
 * other considerations:
 *     The first packet that is stored will start at the memory address denoted
 *     by packetspace. Each additional packet will be stored right after where
 *     the last one left off. As such, after a packet is stored and a pointer
 *     to its location within packetspace is added at packets[packetnum], the
 *     pointer in packets[packetnum+1] should also be updated
 *     to contain the starting address for the next incoming packet.
 */
void store_packet(char * packetspace, char * packets[MAXPACKETS], char * packet,
                  int packetlength, int packetnum)
{
    int index=0;
    char *packet_ptr;
    // if it is the first packet, set first address to the beginning address of
    // packetspace
    if(packetnum==0)
        packets[0]= packetspace;
    //access packet entry in packetspace
    packet_ptr=packets[packetnum];
    // copying string to packet space
    for (index = 0; index < packetlength; ++index) {
        *packet_ptr=packet[index];
        packet_ptr++;
    }
    // set entry address for next packet
    packets[packetnum+1]=packet_ptr;

}

//
// Functions from here to end of this file should NOT be changed
//

/* print the menu of choices to the user
 *
 */
void print_menu(void)
{
    printf("Simple sniffer commands\n\n");
    printf("f FF num : Search for first instance of byte (in hex) in packet number num\n");
    printf("g FF     : Search for first instance of byte in each packet\n");
    printf("s string num  : Search for first instance of string in packet number num\n");
    printf("t string      : Search for first instance of string in each packet\n");
    printf("w : Search all packets for website domain names\n");
    printf("p num : Print packet number num (formatted print)\n");
    printf("q     : Quit\n");
    printf("?     : Print this menu\n");
}

/*----------------------------------------------------------*/
/*
 *  Read in the input file, extract a packet, and send it to store_packet()
 */
int process_input(char * filename, char * packetspace, char * packets[MAXPACKETS])
{
    FILE * packetsfile;
    int i;
    int j;
    char c;
    int packetlength = -1;;
    // Note: packet is a temporary buffer used to hold contents while
    //       collecting from the input file.  The packet contents are
    //       copied from this temporary buffer into the final
    //       packetspace memory location using the store_packet() function.
    // one extra byte for null
    char *packet = (char *) calloc(MAXPACKETLENGTH+1, sizeof(char));

    // begin reading in packets from file
    packetsfile = fopen(filename, "r");

    if(packetsfile == NULL) {
        printf("Error opening file %s.\n", filename);
        exit(EXIT_FAILURE);
    }

    i = 0;
    while (fscanf(packetsfile, "%d", &packetlength) != EOF) {
        // note need to leave one space for end of last packet location
        if (i >= MAXPACKETS - 1) {
            printf("invalid input file: too many packets %d\n", i);
            exit(EXIT_FAILURE);
        }

        if (packetlength < 1 || packetlength >= MAXPACKETLENGTH) {
            printf("invalid input file.  packet %d has length %d\n",
                   i, packetlength);
            exit(EXIT_FAILURE);
        }
        // consume initial ' ' in file
        fscanf(packetsfile, "%c", &c);
        if (c != ' ') {
            printf("invalid input file: packet %d missing space '%c'\n", i, c);
            exit(EXIT_FAILURE);
        }
        // read packet
        for (j = 0; j < packetlength; j++) {
            fscanf(packetsfile, "%c", &packet[j]);
        }
        // don't forget the null character for a string (but not packet)
        packet[j] = '\0';
        // consume trailing '\n' in file
        fscanf(packetsfile, "%c", &c);
        if (c != '\n') {
            printf("invalid input file: packet %d missing end of line '%c'\n", i, c);
            exit(EXIT_FAILURE);
        }

        // send packet to be stored
        store_packet(packetspace, packets, packet, packetlength, i);
        i++;

        // null packet for next round - for safety
        memset(packet, 0, MAXPACKETLENGTH);
        packetlength = -1;
    }
    if (i == 0) {
        printf("invalid input file: no packets found %s\n", filename);
        exit(EXIT_FAILURE);
    }

    fclose(packetsfile);
    free(packet);

    return i;       // the number of packets
}

/*----------------------------------------------------------*/
int main(int argc, char *argv[])
{
    char *filename;        // the input file name
    char *packetspace;     // starting address of memory block to store file
    int fn_len;            // length of the input file name
    int found = 0;         // if search was successful
    int items;

    char line[MAXLINE];
    char command[MAXLINE];
    char inputcs[MAXLINE];
    int  packetnum;

    char *packets[MAXPACKETS];
    int numpackets;

    if (argc != 2) {
        printf("Usage: lab4 filename\n");
        exit(1);
    }

    // prepare filename
    fn_len = strlen(argv[1]);
    // remember the null
    filename = (char *) malloc((fn_len + 1) * sizeof(char));
    strcpy(filename, argv[1]);

    // create large space for packing packets
    packetspace = (char *) malloc(MAXFILESIZE * sizeof(char));

    // process the input file and store the packets in packetspace
    numpackets = process_input(filename, packetspace, packets);

    printf("Processed %d packets.\n\n", numpackets);

    // menu and selection
    print_menu();

    printf("> ");
    while (fgets(line, MAXLINE, stdin) != NULL) {
        printf("\n");
        items = sscanf(line, "%s%s%d", command, inputcs, &packetnum);
        if (items == 3 && strcmp(command, "f") == 0) {
            if (strlen(inputcs) != 2 || !isxdigit(inputcs[0]) || !isxdigit(inputcs[1])) {
                printf("f Invalid byte: %s\n", inputcs);
            } else if (packetnum < 0 || packetnum >= numpackets) {
                printf("f Invalid packet: %d\n", packetnum);
            } else {
                found = find_byte_packet(packets, packetnum, inputcs);
                if (!found) {
                    printf("Did not find byte: %s in packet %d\n", inputcs, packetnum);
                } else {
                    printf("Found byte: %s in packet %d\n", inputcs, packetnum);
                }
            }
        } else if (items == 2 && strcmp(command, "g") == 0) {
            if (strlen(inputcs) != 2 || !isxdigit(inputcs[0]) || !isxdigit(inputcs[1])) {
                printf("g Invalid byte: %s\n", inputcs);
            } else {
                found = find_byte_all(packets, numpackets, inputcs);
                if (!found) {
                    printf("Did not find byte: %s in any packet\n", inputcs);
                } else {
                    printf("Found byte: %s in %d unique packets\n", inputcs, found);
                }
            }
        } else if (items == 3 && strcmp(command, "s") == 0) {
            if (packetnum < 0 || packetnum >= numpackets) {
                printf("s Invalid packet number: %d\n", packetnum);
            }
            found = find_string_packet(packets, packetnum, inputcs);
            if (!found) {
                printf("String not found: '%s' in packet %d\n", inputcs, packetnum);
            } else {
                printf("Found string: '%s' in packet %d\n", inputcs, packetnum);
            }
        } else if (items == 2 && strcmp(command, "t") == 0) {
            found = find_string_all(packets, numpackets, inputcs);
            if (!found) {
                printf("String not found: '%s' in any packet\n", inputcs);
            } else {
                printf("Found string: '%s' in %d unique packets\n", inputcs, found);
            }
        } else if (items == 1 && strcmp(command, "w") == 0) {
            found = find_websites(packets, numpackets);
            if (!found) {
                printf("No websites found in any packet\n");
            } else {
                printf("Found websites in %d unique packets\n", found);
            }
        }  else if (items == 2 && strcmp(command, "p") == 0) {
            packetnum = -1;
            packetnum = atoi(inputcs);
            if (packetnum < 0 || packetnum >= numpackets) {
                printf("p Invalid packet number: %d\n", packetnum);
            } else {
                print_packet(-1, 1, packets, packetnum);
            }
        } else if (items == 1 && strcmp(command, "q") == 0) {
            break;
        } else if (items == 1 && strcmp(command, "?") == 0) {
            print_menu();
        } else {
            printf("# :%s", line);
        }
        printf("> ");
    }

    // for every malloc there must be a free
    free(packetspace);
    free(filename);

    printf("Goodbye\n");
    return EXIT_SUCCESS;
}
